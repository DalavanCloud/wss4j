//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.05.13 at 03:39:08 PM CEST 
//


package org.w3._2001._04.xmlenc_;

import ch.gigerstyle.xmlsec.Constants;
import ch.gigerstyle.xmlsec.ParseException;
import ch.gigerstyle.xmlsec.Parseable;
import ch.gigerstyle.xmlsec.Utils;
import com.sun.org.apache.xml.internal.security.encryption.CipherValue;
import org.w3._2000._09.xmldsig_.KeyInfoType;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.events.Attribute;
import javax.xml.stream.events.EndElement;
import javax.xml.stream.events.StartElement;
import javax.xml.stream.events.XMLEvent;
import java.util.Iterator;


/**
 * <p>Java class for CipherDataType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CipherDataType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;choice>
 *         &lt;element name="CipherValue" type="{http://www.w3.org/2001/XMLSchema}base64Binary"/>
 *         &lt;element ref="{http://www.w3.org/2001/04/xmlenc#}CipherReference"/>
 *       &lt;/choice>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CipherDataType", propOrder = {
    "cipherValue",
    "cipherReference"
})
public class CipherDataType implements Parseable {

    private Parseable currentParseable;

    @XmlElement(name = "CipherValue")
    protected byte[] cipherValue;
    @XmlElement(name = "CipherReference")
    protected CipherReferenceType cipherReference;

    public CipherDataType(StartElement startElement) {
    }


    public boolean parseXMLEvent(XMLEvent xmlEvent) throws ParseException {
        if (currentParseable != null) {
            boolean finished = currentParseable.parseXMLEvent(xmlEvent);
            if (finished) {
                currentParseable.validate();
                currentParseable = null;
            }
            return false;
        }

        switch (xmlEvent.getEventType()) {
             case XMLStreamConstants.START_ELEMENT:
                 StartElement startElement = xmlEvent.asStartElement();

                 if (startElement.getName().equals(Constants.TAG_xenc_CipherValue)) {
                     currentParseable = new Parseable() {
                         public boolean parseXMLEvent(XMLEvent xmlEvent) throws ParseException {
                             switch (xmlEvent.getEventType()) {
                                case XMLStreamConstants.START_ELEMENT:
                                    StartElement startElement = xmlEvent.asStartElement();
                                    if (!startElement.getName().equals(Constants.TAG_xenc_CipherValue)) {
                                        throw new ParseException("Unsupported Element " + startElement.getName());
                                    }
                                    break;
                                case XMLStreamConstants.END_ELEMENT:
                                    EndElement endElement = xmlEvent.asEndElement();
                                     if (endElement.getName().equals(Constants.TAG_xenc_CipherValue)) {
                                         return true;
                                     }
                                    break;
                                case XMLStreamConstants.CHARACTERS:
                                    //todo handle mutliple character events:
                                    cipherValue = xmlEvent.asCharacters().getData().getBytes();
                                    break;
                                default:
                                    throw new ParseException("Unexpected event received " + Utils.getXMLEventAsString(xmlEvent));
                             }
                             return false;
                         }

                         public void validate() throws ParseException {
                             if (cipherValue == null) {
                                 throw new ParseException("CipherValue is missing");
                             }
                         }
                     };
                 }
                 else {
                     throw new ParseException("Unsupported Element: " + startElement.getName());
                 }

                 break;
             case XMLStreamConstants.END_ELEMENT:
                 currentParseable = null;
                 EndElement endElement = xmlEvent.asEndElement();
                 if (endElement.getName().equals(Constants.TAG_xenc_CipherData)) {
                     return true;
                 }
                 break;             
             default:
                 throw new ParseException("Unexpected event received " + Utils.getXMLEventAsString(xmlEvent));
        }
        return false;
    }

    public void validate() throws ParseException {
        if (cipherValue == null) {
            throw new ParseException("CipherValue is missing");
        }
    }

    /**
     * Gets the value of the cipherValue property.
     * 
     * @return
     *     possible object is
     *     byte[]
     */
    public byte[] getCipherValue() {
        return cipherValue;
    }

    /**
     * Sets the value of the cipherValue property.
     * 
     * @param value
     *     allowed object is
     *     byte[]
     */
    public void setCipherValue(byte[] value) {
        this.cipherValue = ((byte[]) value);
    }

    /**
     * Gets the value of the cipherReference property.
     * 
     * @return
     *     possible object is
     *     {@link CipherReferenceType }
     *     
     */
    public CipherReferenceType getCipherReference() {
        return cipherReference;
    }

    /**
     * Sets the value of the cipherReference property.
     * 
     * @param value
     *     allowed object is
     *     {@link CipherReferenceType }
     *     
     */
    public void setCipherReference(CipherReferenceType value) {
        this.cipherReference = value;
    }

}
