<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
<body>
<section name="WSS4J configuration">
<p>
This page describes how to use configure Apache WSS4J. This page only applies to WSS4J 1.6, a lot of the
properties have changed since WSS4J 1.5.x.
</p>
<subsection name="Crypto properties">
<p>
Apache WSS4J uses the Crypto interface to get keys and certificates for encryption/decryption, or for
signature creation/verification. WSS4J ships with two implementations, a standard "Merlin" implementation,
which is based around two JDK keystores for key retrieval and trust verification, as well as a 
CertificateStore, which is based around a set of X509Certificates, for encryption/signature verification
only. For more information on the Crypto implementations, go
<a href="http://coheigea.blogspot.com/2011/02/wss4j-16-changes-to-crypto-interface.html">here</a>. 
</p>
<p>
It is possible to instantiate a Crypto implementation directly, but it can also be loaded via a 
properties file. For more information on the Merlin property values, go 
<a href="http://coheigea.blogspot.com/2011/01/wss4j-16-crypto-property-change.html">here</a>. The 
property values are summarised here:
</p>
<p>
General properties:
</p>
<table name="General Properties">
<tr>
<th>Property name</th>
<th>Property value</th>
</tr>
<tr>
<td>org.apache.ws.security.crypto.provider</td>
<td>WSS4J specific provider used to create Crypto instances. Defaults to: 
"org.apache.ws.security.components.crypto.Merlin".</td>
</tr>
<tr>
<td>org.apache.ws.security.crypto.merlin.keystore.provider</td>
<td>The provider used to load keystores. Defaults to installed provider.</td>
</tr>
<tr>
<td>org.apache.ws.security.crypto.merlin.cert.provider</td>
<td>The provider used to load certificates. Defaults to keystore provider.</td>
</tr>
</table>
<p>
Keystore properties:
</p>
<table name="Merlin Keystore Properties">
<tr>
<th>Property name</th>
<th>Property value</th>
</tr>
<tr>
<td>org.apache.ws.security.crypto.merlin.keystore.file</td>
<td>The location of the keystore</td>
</tr>
<tr>
<td>org.apache.ws.security.crypto.merlin.keystore.password</td>
<td>The password used to load the keystore. Falls back to: "security".</td>
</tr>
<tr>
<td>org.apache.ws.security.crypto.merlin.keystore.type</td>
<td>Type of keystore. Defaults to: java.security.KeyStore.getDefaultType())</td>
</tr>
<tr>
<td>org.apache.ws.security.crypto.merlin.keystore.alias</td>
<td>The default keystore alias to use, if none is specified.</td>
</tr>
</table>
<p>
TrustStore properties:
</p>
<table name="Merlin TrustStore properties">
<tr>
<th>Property name</th>
<th>Property value</th>
</tr>
<tr>
<td>org.apache.ws.security.crypto.merlin.load.cacerts</td>
<td>whether to load the CA certs in ${java.home}/lib/security/cacerts or not (default is false)</td>
</tr>
<tr>
<td>org.apache.ws.security.crypto.merlin.truststore.file</td>
<td>The location of the truststore</td>
</tr>
<tr>
<td>org.apache.ws.security.crypto.merlin.truststore.password </td>
<td>The truststore password. Defaults to "changeit".</td>
</tr>
<tr>
<td>org.apache.ws.security.crypto.merlin.truststore.type</td>
<td>The truststore type. Defaults to: java.security.KeyStore.getDefaultType().</td>
</tr>
</table>
 
</subsection>
<subsection name="SAML properties">
<p>
Apache WSS4J uses the SAMLIssuer interface to configure the creation and signing of a SAML 
Assertion. WSS4J ships with a default "SAMLIssuerImpl" implementation. It is possible to 
instantiate a SAMLIssuer implementation directly, but it can also be loaded via a properties file.
For more information on the SAMLIssuer property values, go 
<a href="http://coheigea.blogspot.com/2011/03/wss4j-16-saml-property-changes.html">here</a>. The 
property values are summarised here:
</p>
<table name="SAMLIssuer properties">
<tr>
<th>Property name</th>
<th>Property value</th>
</tr>
<tr>
<td>org.apache.ws.security.saml.issuerClass</td>
<td>The SAML Issuer implementation (defaults to "org.apache.ws.security.saml.SAMLIssuerImpl").</td>
</tr>
<tr>
<td>org.apache.ws.security.saml.issuer.cryptoProp.file</td>
<td>The crypto properties file corresponding to the issuer crypto instance, if the assertion is to
be signed.</td>
</tr>
<tr>
<td>org.apache.ws.security.saml.issuer.key.name</td>
<td>The KeyStore alias for the issuer key.</td>
</tr>
<tr>
<td>org.apache.ws.security.saml.issuer.key.password</td>
<td>The KeyStore password for the issuer key.</td>
</tr>
<tr>
<td>org.apache.ws.security.saml.issuer</td>
<td>The issuer name</td>
</tr>
<tr>
<td>org.apache.ws.security.saml.issuer.sendKeyValue</td>
<td>Whether to send the key value or the X509Certificate. Defaults to: "false".</td>
</tr>
<tr>
<td>org.apache.ws.security.saml.issuer.signAssertion</td>
<td>Whether the SAMLIssuer implementation will sign the assertion or not. Defaults to: 
"false".</td>
</tr>
<tr>
<td>org.apache.ws.security.saml.callback</td>
<td>The name of the SAML CallbackHandler implementation used to populate the SAML Assertion.</td>
</tr>
</table>
</subsection>
<subsection name="WSHandler configuration tags">
<p>
Apache WSS4J provides a set of configuration tags for the WSHandler object used for the creation
and processing of WS-Security enabled messages. For more information see the javadoc
<a href="apidocs/org/apache/ws/security/handler/WSHandlerConstants.html">here</a>.
</p>
<p>
The configuration tags for WSHandler Actions are summarised here:
</p>
<table name="WSHandler Action configuration tags">
<tr>
<th>Tag name</th>
<th>Tag value</th>
<th>Tag meaning</th>
</tr>
<tr>
<td>ACTION</td>
<td>action</td>
<td>The action to perform, e.g. WSHandlerConstants.TIMESTAMP</td>
</tr>
<tr>
<td>NO_SECURITY</td>
<td>NoSecurity</td>
<td>Do not perform any action, do nothing.</td>
</tr>
<tr>
<td>USERNAME_TOKEN</td>
<td>UsernameToken</td>
<td>Perform a UsernameToken action.</td>
</tr>
<tr>
<td>SAML_TOKEN_UNSIGNED</td>
<td>SAMLTokenUnsigned</td>
<td>Perform an unsigned SAML Token action.</td>
</tr>
<tr>
<td>SAML_TOKEN_SIGNED</td>
<td>SAMLTokenSigned</td>
<td>Perform a signed SAML Token action.</td>
</tr>
<tr>
<td>SIGNATURE</td>
<td>Signature</td>
<td>Perform a signature action.</td>
</tr>
<tr>
<td>ENCRYPT</td>
<td>Encrypt</td>
<td>Perform an encryption action.</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>Timestamp</td>
<td>Perform a Timestamp action.</td>
</tr>
<tr>
<td>SIGN_WITH_UT_KEY</td>
<td>UsernameTokenSignature</td>
<td>Perform a .NET specific signature using a Username Token action.</td>
</tr>
</table>
<p>
The configuration tags for WSHandler properties that are configured via a boolean parameter 
(i.e. "true" or "false") are summarised here:
</p>
<table name="WSHandler boolean configuration tags">
<tr>
<th>Tag name</th>
<th>Tag value</th>
<th>Tag meaning</th>
</tr>
<tr>
<td>ENABLE_SIGNATURE_CONFIRMATION</td>
<td>enableSignatureConfirmation</td>
<td>Whether to enable signature confirmation or not. Default is: "false".</td>
</tr>
<tr>
<td>MUST_UNDERSTAND</td>
<td>mustUnderstand</td>
<td>Set the outbound MustUnderstand flag or not. Default is: "true".</td>
</tr>
<tr>
<td>IS_BSP_COMPLIANT</td>
<td>isBSPCompliant</td>
<td>Whether to ensure compliance with the BSP 1.1 spec or not. Default is: "true".</td>
</tr>
<tr>
<td>HANDLE_CUSTOM_PASSWORD_TYPES</td>
<td>handleCustomPasswordTypes</td>
<td>Whether to allow non-standard password types in a UsernameToken. Default is: "false".</td>
</tr>
<tr>
<td>PASSWORD_TYPE_STRICT</td>
<td>passwordTypeStrict</td>
<td>Whether to enable strict Username Token password type handling. Default is: "false".</td>
</tr>
<tr>
<td>ALLOW_NAMESPACE_QUALIFIED_PASSWORD_TYPES</td>
<td>allowNamespaceQualifiedPasswordTypes</td>
<td>Whether (wsse) namespace qualified password types are accepted when processing UsernameTokens. 
Default is: "false".</td>
</tr>
<tr>
<td>USE_ENCODED_PASSWORDS</td>
<td>useEncodedPasswords</td>
<td>Set whether to treat passwords as binary values for Username Tokens. Default is: "false".</td>
</tr>
<tr>
<td>USE_SINGLE_CERTIFICATE</td>
<td>useSingleCertificate</td>
<td>Whether to use a single certificate or a whole certificate chain to construct a 
BinarySecurityToken. Default is: "true".</td>
</tr>
<tr>
<td>USE_DERIVED_KEY</td>
<td>useDerivedKey</td>
<td>Whether to use the standard UsernameToken Key Derivation algorithm. Default is: "true".</td>
</tr>
<tr>
<td>USE_DERIVED_KEY_FOR_MAC</td>
<td>useDerivedKeyForMAC</td>
<td>Whether to use the Username Token derived key for a MAC. Default is: "true".</td>
</tr>
<tr>
<td>TIMESTAMP_PRECISION</td>
<td>precisionInMilliseconds</td>
<td>Set whether outbound timestamps have precision in milliseconds. Default is: "true".</td>
</tr>
<tr>
<td>TIMESTAMP_STRICT</td>
<td>timestampStrict</td>
<td>Set whether to enable strict Timestamp handling. Default is: "true".</td>
</tr>
<tr>
<td>ENC_SYM_ENC_KEY</td>
<td>encryptSymmetricEncryptionKey</td>
<td>Set whether to encrypt the symmetric encryption key or not. Default is: "true".</td>
</tr>
</table>
</subsection>
</section>            
</body>
</document>